/*输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）
示例1
输入
复制
[1,2,3,4,5],[4,3,5,1,2]
返回值
复制
false
*/

class Solution {
public:
	bool IsPopOrder(vector<int> pushV, vector<int> popV)
	{
		if (pushV.size() != popV.size())
			return false;
		stack<int> st;
		int in_index = 0;//  pushV的下标
		int out_index = 0;// popV的下标
		while (out_index<popV.size())
		{
			while (st.empty() || st.top() != popV[out_index])
			{
				if (in_index<pushV.size())
					st.push(pushV[in_index++]);
				else
					return false;
			}
			st.pop();
			out_index++;
		}
		return true;
	}
};